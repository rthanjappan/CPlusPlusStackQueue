// Program : Lab 10 
//Programmer : Rosemol Thanjappan
//Date : 3/12/2019
// running with a Menu
//   Static Stack Demo
//   
#include <conio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <fstream>
#include <iomanip>
using namespace std;
#include "Stack.h"
#include "DynamicStack.h"
#include "Inventory.h"

//#ifndef STACK_H
//#define STACK_H
//// Stack template
// template < class T>
//class Stack
//{
// private:
//	 T *stackArray;
//	 int stackSize;
//	 int top;
//	
// public:
//	 // Constructor
//	 Stack(int); 
//	 // Copy constructor
//	 Stack(const Stack &);
//		 
//	
//	 // Destructor
//	 ///template < class T>
//	 ~Stack();
//		 
//	 // Stack operations
//	 void push(T);
//	 void pop(T &);
//	 bool isFull();
//	 bool isEmpty();
//	 };
//template < class T>
//Stack<T>::Stack(int size)
//{
//	stackArray = new T[size];
//	stackSize = size;
//	top = -1;
//
//}
//template < class T>
//Stack<T>::Stack(const Stack &obj)
//{
//	// Create the stack array.
//	if (obj.stackSize > 0)
//		stackArray = new T[obj.stackSize];
//	else
//		stackArray = nullptr;
//
//	// Copy the stackSize attribute.
//	stackSize = obj.stackSize;
//
//	// Copy the stack contents.
//	for (int count = 0; count < stackSize; count++)
//		stackArray[count] = obj.stackArray[count];
//
//	// Set the top of the stack.
//	top = obj.top;
//}
//template < class T>
//Stack<T>::~Stack()
//{
//	if (stackSize > 0)
//		delete[] stackArray;
//}
//
//template < class T>
// void Stack<T>::push(T item)
// {
//	 if (isFull())
//		 {
//		 cout << "The stack is full.\n";
//		 }
//	 else
//		 {
//		 top++;
//		 stackArray[top] = item;
//		 }
//	 }
//template < class T>
// void Stack<T>::pop(T &item)
// {
//	 if (isEmpty())
//		 {
//		 cout << "The stack is empty.\n";
//		 }
//	 else
//	 {
//	 item = stackArray[top];
//		 top--;
//		 }
//	 }
//template < class T>
// bool Stack<T>::isFull()
// {
//	 bool status;
//	
//		 if (top == stackSize - 1)
//		 status = true;
//	 else
//	 status = false;
//	
//	 return status;
//	 }
//template < class T>
// bool Stack<T>::isEmpty()
// {
//	 bool status;
//	
//	 if (top == -1)
//	 status = true;
//	 else
//	 status = false;
//	
//	 return status;
//	 }
//#endif// !STACK_H
//
//
////Dynamic stack template
//#ifndef DYNAMICSTACK_H
//#define DYNAMICSTACK_H
//// Stack template
//template < class T>
//class DynamicStack
// {
// private:
//		  // Structure for the stack nodes
//			  struct StackNode
//			  {
//			  T value; // Value in the node
//			  StackNode *next; // Pointer to the next node
//			  };
//		 
//			 
//			  StackNode *top; // Pointer to the stack top
//		 
//	  public:
//		  //Constructor
//		  DynamicStack()
//		 { top = nullptr; }
//		
//		 // Destructor
//		  ~DynamicStack(); 
//		
//		 // Stack operations
//		 void push(T);
//		 void pop(T &);
//		 bool isEmpty();
//		 };
//template < class T>
//DynamicStack<T>::~DynamicStack()
//{
//	StackNode *nodePtr, *nextNode;
//
//	// Position nodePtr at the top of the stack.
//	nodePtr = top;
//
//	// Traverse the list deleting each node.
//	while (nodePtr != nullptr)
//	{
//		nextNode = nodePtr->next;
//		delete nodePtr;
//		nodePtr = nextNode;
//	}
//
//}
//
//template < class T>
//void DynamicStack<T>::push(T item)
// {
// StackNode *newNode = nullptr; // Pointer to a new node
//
// // Allocate a new node and store num there.
// newNode = new StackNode;
// newNode->value = item;
//
// // If there are no nodes in the list
// // make newNode the first node.
// if (isEmpty())
// {
//top = newNode;
// newNode->next = nullptr;
// }
// else // Otherwise, insert NewNode before top.
// {
// newNode->next = top;
// top = newNode;
// }
// }
//template < class T>
//void DynamicStack<T>::pop(T &item)
// {
//StackNode *temp = nullptr; // Temporary pointer
//
// // First make sure the stack isn't empty.
// if (isEmpty())
// {
// cout << "The stack is empty.\n";
// }
// else // pop value off top of stack
// {
// item = top->value;
// temp = top->next;
// delete top;
// top = temp;
// }
// }
// template < class T>
// bool DynamicStack<T>::isEmpty()
// {
// bool status;
//
// if (!top)
// status = true;
// else
// status = false;
//
// return status;
// }
//#endif// !DYNAMICSTACK_H
//#ifndef INVENTORY_H
//#define INVENTORY_H
// class Inventory {
// public:
//
//	 void setSerialNum(int sNum) {
//		 serialNum = sNum;
//	 }
//	 void setManufactDate(string date) {
//		 manufactDate = date;
//	 }
//	 void setLotNum(int lNum) {
//		 lotNum = lNum;
//	 }
//
//
//	 int getSerialNum() {
//		 return serialNum;
//	 }
//	 string getManufactDate() {
//		 return manufactDate;;
//	 }
//	 int getLotNum() {
//		 return lotNum;
//	 }
//	 //overload cout’s << operator and cin’s >> operator
//	 friend ostream &operator << (ostream &strm, const Inventory &obj) {
//		
//		 strm << "Serial Number : " << obj.serialNum
//			 << "    Manufacturing Date  : " << obj.manufactDate
//			 << "    Lot number  : " << obj.lotNum;
//			 
//
//
//		 
//		 return strm;
//	 }
// private:
//	 int serialNum;
//	 string manufactDate;
//	 int lotNum;
// };
//#endif// !INVENTORY_H
 int main() {
	 DynamicStack<Inventory> inventoryStack;
	 Inventory temp;
	 string mDate = "12/1/2019";
	 temp.setSerialNum(1001);
	 temp.setManufactDate("1/1/2019");
	 temp.setLotNum(101);
	 inventoryStack.push(temp);

	 Inventory poppedValue;
	 inventoryStack.pop(poppedValue);
	 cout << poppedValue << endl;


	 system("pause");
	 return 0;
 }